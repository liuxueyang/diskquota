-- Test schema
CREATE SCHEMA s1;
SET search_path TO s1;
CREATE TABLE a(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO a SELECT generate_series(1,100);
-- expect insert success
INSERT INTO a SELECT generate_series(1,100000);
SELECT diskquota.set_schema_quota('s1', '1 MB');
 set_schema_quota 
------------------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- expect insert fail
INSERT INTO a SELECT generate_series(1,100);
ERROR:  schema's disk space quota exceeded with name:s1
CREATE TABLE a2(i int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
-- expect insert fail
INSERT INTO a2 SELECT generate_series(1,100);
ERROR:  schema's disk space quota exceeded with name:s1
-- Test alter table set schema
CREATE SCHEMA s2;
ALTER TABLE s1.a SET SCHEMA s2;
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

-- expect insert succeed
INSERT INTO a2 SELECT generate_series(1,200);
-- expect insert succeed
INSERT INTO s2.a SELECT generate_series(1,200);
-- prepare a schema that has reached quota limit
CREATE SCHEMA badquota;
DROP ROLE IF EXISTS testbody;
NOTICE:  role "testbody" does not exist, skipping
CREATE ROLE testbody;
NOTICE:  resource queue required -- using default resource queue "pg_default"
CREATE TABLE badquota.t1(i INT);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
ALTER TABLE badquota.t1 OWNER TO testbody;
INSERT INTO badquota.t1 SELECT generate_series(0, 100000);
SELECT diskquota.init_table_size_table();
 init_table_size_table 
-----------------------
 
(1 row)

SELECT diskquota.set_schema_quota('badquota', '1 MB');
 set_schema_quota 
------------------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT size, segid FROM diskquota.table_size
  WHERE tableid IN (SELECT oid FROM pg_class WHERE relname='t1')
  ORDER BY segid DESC;
  size   | segid 
---------+-------
 1310720 |     2
 1310720 |     1
 1310720 |     0
 3932160 |    -1
(4 rows)

-- expect fail
INSERT INTO badquota.t1 SELECT generate_series(0, 10);
ERROR:  schema's disk space quota exceeded with name:badquota
ALTER TABLE s2.a SET SCHEMA badquota;
-- expect failed
INSERT INTO badquota.a SELECT generate_series(0, 100);
ERROR:  schema's disk space quota exceeded with name:badquota
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT schema_name, quota_in_mb FROM diskquota.show_fast_schema_quota_view WHERE schema_name = 's1';
 schema_name | quota_in_mb 
-------------+-------------
 s1          |           1
(1 row)

RESET search_path;
DROP TABLE s1.a2, badquota.a;
DROP SCHEMA s1, s2;
DROP TABLE badquota.t1;
DROP ROLE testbody;
DROP SCHEMA badquota;
